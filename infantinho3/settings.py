# settings.py
"""
Django settings for infantinho3 project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
from django.urls import reverse_lazy # Use reverse_lazy for settings

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-placeholder-@dev') # Changed placeholder

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'True') == 'True'

ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', '').split(',') if os.environ.get('ALLOWED_HOSTS') else []
# Add localhost and common dev hosts if DEBUG is True
if DEBUG and not ALLOWED_HOSTS:
    ALLOWED_HOSTS = ['localhost', '127.0.0.1']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize', # Added for humanize filters (like naturaltime)
    
    # Third-party apps
    # 'ckeditor', # REMOVED
    # 'ckeditor_uploader', # Not currently used
    'tinymce', # ADDED
    'widget_tweaks', # Added for form rendering
    'impersonate', # Add impersonate app
    
    # Local apps
    'users.apps.UsersConfig', # Use AppConfig for apps
    'classes.apps.ClassesConfig',
    'blog.apps.BlogConfig',
    'checklists.apps.ChecklistsConfig',
    'diary.apps.DiaryConfig', # Add the new diary app
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware', 
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'impersonate.middleware.ImpersonateMiddleware', # Add impersonate middleware
]

ROOT_URLCONF = 'infantinho3.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'infantinho3.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

if os.environ.get('DB_NAME'):
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.environ.get('DB_NAME'),
            'USER': os.environ.get('DB_USER'),
            'PASSWORD': os.environ.get('DB_PASSWORD'),
            'HOST': os.environ.get('DB_HOST', 'localhost'),
            'PORT': os.environ.get('DB_PORT', '5432'),
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = os.environ.get('LANGUAGE_CODE', 'pt-pt')

TIME_ZONE = os.environ.get('TIME_ZONE', 'Europe/Lisbon')

USE_I18N = True

USE_L10N = True # Added for locale formatting

USE_TZ = True

# Define the path for translation files
LOCALE_PATHS = [
    BASE_DIR / 'locale',
]


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = os.environ.get('STATIC_URL', '/static/')
STATIC_ROOT = os.environ.get('STATIC_ROOT', BASE_DIR / 'staticfiles') # For collectstatic
STATICFILES_DIRS = [
    BASE_DIR / "static", # Add project-level static directory
]
# Use ManifestStaticFilesStorage for cache busting in production
STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.ManifestStaticFilesStorage'

# Media files (User uploads)
MEDIA_URL = os.environ.get('MEDIA_URL', '/media/')
MEDIA_ROOT = os.environ.get('MEDIA_ROOT', BASE_DIR / 'media')

# REMOVED CKEditor Config section
# CKEDITOR_CONFIGS = { ... }
# CKEDITOR_UPLOAD_PATH = "uploads/"

# --- TinyMCE Config --- ADDED Section
TINYMCE_DEFAULT_CONFIG = {
    "theme": "silver", # Default theme
    "height": 300,
    "menubar": False,
    "plugins": "advlist autolink lists link image charmap print preview anchor searchreplace visualblocks code fullscreen insertdatetime media table paste code help wordcount autosave hr",
    "toolbar": "undo redo | restoredraft | formatselect | bold italic backcolor | \
                alignleft aligncenter alignright alignjustify | \
                bullist numlist outdent indent | link image media table hr | removeformat | code fullscreen preview | help",
    "content_css": "//www.tiny.cloud/css/codepen.min.css", # Example CDN CSS
    "relative_urls": False, # Important for media URLs
    "language": "pt_PT", # Use Portuguese language pack if available via CDN or downloaded
    "autosave_ask_before_unload": True, # Ask before leaving page if there are unsaved changes
    "autosave_interval": "30s", # Save every 30 seconds
    "autosave_restore_when_empty": True, # Offer restore even if editor is empty
    "autosave_retention": "20m", # Keep drafts for 20 minutes
    # --- Added image upload settings ---
    "images_upload_url": reverse_lazy('blog:tinymce_image_upload'), # URL to the upload handler view
    "images_upload_base_path": "/media/", # Optional: If your MEDIA_URL is different from root
    "images_upload_credentials": True, # Send cookies with the upload request (for @login_required)
    "automatic_uploads": True, # Upload automatically when pasting/dropping images
    "image_advtab": True, # Add advanced tab to image dialog
    "file_picker_types": 'image', # Allow image picker
    # TODO: Consider adding a file_picker_callback for more control if needed
    # "file_picker_callback": "function(cb, value, meta) { ... }",
}
TINYMCE_EXTRA_MEDIA = { # Optional: Include extra JS/CSS if needed, e.g., for custom plugins
    # 'css': {
    #    'all': [
    #        ...
    #    ],
    # },
    # 'js': [
    #    ...
    # ],
}
# TINYMCE_JS_URL = 'https://cdn.tiny.cloud/1/no-api-key/tinymce/7/tinymce.min.js' # Use if you have an API key or self-hosted
TINYMCE_COMPRESSOR = False # Set to True in production if you download the JS
# --- End TinyMCE Config ---

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Custom User Model
AUTH_USER_MODEL = 'users.User'

# Define Authentication Backends
AUTHENTICATION_BACKENDS = [
    'users.backends.EmailOrUsernameBackend', # Our custom backend
    'django.contrib.auth.backends.ModelBackend', # Default backend (for admin, etc.)
]

# Login/Logout URLs
# Use reverse_lazy because URLs might not be loaded when settings are processed
LOGIN_URL = reverse_lazy('users:login_choice') # Point to login choice page
LOGIN_REDIRECT_URL = '/' # Redirect to landing page after login
LOGOUT_REDIRECT_URL = reverse_lazy('users:login_choice') # TEMP: Redirect to login choice page


# Azure AD Config (using environment variables)
AZURE_AD_CLIENT_ID = os.environ.get('AZURE_AD_CLIENT_ID')
AZURE_AD_CLIENT_SECRET = os.environ.get('AZURE_AD_CLIENT_SECRET')
AZURE_AD_TENANT_ID = os.environ.get('AZURE_AD_TENANT_ID')
AZURE_AD_REDIRECT_URI = os.environ.get('AZURE_AD_REDIRECT_URI')
AZURE_AD_AUTHORITY = os.environ.get('AZURE_AD_AUTHORITY', f'https://login.microsoftonline.com/{AZURE_AD_TENANT_ID}' if os.environ.get('AZURE_AD_TENANT_ID') else None)


# Email Config (using environment variables)
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend' # Use SMTP for real sending
# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend' # Use console for testing
EMAIL_HOST = os.environ.get('EMAIL_HOST', 'smtp.office365.com')
EMAIL_PORT = int(os.environ.get('EMAIL_PORT', 587))
EMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS', 'True') == 'True'
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', '')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', '')
DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL', EMAIL_HOST_USER)


# Security Settings (Basic defaults, adjust for production)
SECURE_SSL_REDIRECT = os.environ.get('SECURE_SSL_REDIRECT', 'False') == 'True'
SESSION_COOKIE_SECURE = os.environ.get('SESSION_COOKIE_SECURE', 'False') == 'True'
CSRF_COOKIE_SECURE = os.environ.get('CSRF_COOKIE_SECURE', 'False') == 'True'
SECURE_HSTS_SECONDS = int(os.environ.get('SECURE_HSTS_SECONDS', 0))
SECURE_HSTS_INCLUDE_SUBDOMAINS = os.environ.get('SECURE_HSTS_INCLUDE_SUBDOMAINS', 'False') == 'True'
SECURE_HSTS_PRELOAD = os.environ.get('SECURE_HSTS_PRELOAD', 'False') == 'True'
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'


# AI Config (Placeholders)
OPENAI_API_KEY = os.environ.get('OPENAI_API_KEY')
GOOGLE_API_KEY = os.environ.get('GOOGLE_API_KEY')


# --- Logging para produção ---
if not DEBUG:
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'handlers': {
            'file': {
                'level': 'WARNING',
                'class': 'logging.FileHandler',
                'filename': os.environ.get('DJANGO_LOG_FILE', BASE_DIR / 'django.log'),
            },
        },
        'loggers': {
            'django': {
                'handlers': ['file'],
                'level': 'WARNING',
                'propagate': True,
            },
        },
    }

# --- Import environment-specific settings if they exist --- 
# (Allows overriding settings in prod.py or local.py without version control)
try:
    from .prod import *
    print("Loaded prod settings")
except ImportError:
    pass
try:
    from .local import *
    print("Loaded local settings")
except ImportError:
    pass

# -- Social Auth App Django Settings --
# (Assume que já tem outras configurações como AUTHENTICATION_BACKENDS, Keys, etc.)

SOCIAL_AUTH_PIPELINE = (
    # Default pipeline steps from social-auth-core
    'social_core.pipeline.social_auth.social_details',
    'social_core.pipeline.social_auth.social_uid',
    'social_core.pipeline.social_auth.auth_allowed',
    'social_core.pipeline.social_auth.social_user',
    'social_core.pipeline.user.get_username',
    # 'social_core.pipeline.user.create_user', # Opcional: Descomente se quiser permitir criação de utilizadores via SSO
    'social_core.pipeline.social_auth.associate_user', # Associa a conta social a um utilizador existente
    'social_core.pipeline.social_auth.load_extra_data',
    'social_core.pipeline.user.user_details',

    # Nosso passo customizado - corre depois do utilizador ser associado/identificado
    'users.pipeline.assign_class_on_signup', 
)

# Se permitir a criação de utilizadores via SSO (descomentando create_user acima), 
# pode querer colocar 'users.pipeline.assign_class_on_signup' *depois* de create_user
# e *depois* de associate_user para garantir que corre para ambos os casos.
# A ordem atual (depois de associate_user) deve funcionar bem, pois user já existe ou foi encontrado.

# É importante garantir que o pipeline padrão que está a usar é este.
# Se estiver a usar um backend específico (ex: AzureAD), ele pode ter um pipeline ligeiramente diferente.
# Verifique a documentação da social-auth-app-django para o seu backend específico se tiver problemas.

# Adicione também configuração básica de logging se ainda não tiver, 
# para poder ver os logs gerados pelo pipeline.py
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO', # Ou 'DEBUG' para mais detalhes
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        # Adicione um logger específico para a sua app ou pipeline se quiser mais controlo
        'users.pipeline': { 
             'handlers': ['console'],
             'level': 'DEBUG', # Captura logs DEBUG e acima do nosso pipeline
             'propagate': False,
        },
    },
}
